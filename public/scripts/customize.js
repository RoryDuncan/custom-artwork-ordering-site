// Generated by CoffeeScript 1.8.0
var addColorPicker, canvas, changeMaterial, colorPickerUpdate, colors, customtext, dimensionSelect, dimensions, invertDimensions, landscape, material, materials, removeColorPicker, showPreviewProportions, toggleColorPicking, updateLetterCount;

canvas = document.getElementById('size');

customtext = document.getElementById('customtext');

material = document.getElementById('material');

materials = {
  'panel': document.getElementById("panel-sizes"),
  'wood': document.getElementById('wood-sizes'),
  'canvas': document.getElementById('canvas-sizes')
};

dimensionSelect = {
  'canvas': document.getElementById("canvas-dimensions"),
  'panel': document.getElementById("panel-dimensions"),
  'wood': document.getElementById("wood-dimensions")
};

dimensions = document.querySelectorAll(".dimensions");

landscape = document.getElementById("landscape");

colors = {
  'pickcolors': document.querySelector(".pick-colors"),
  'artistchoice': document.getElementById("artist-choice"),
  'add': document.getElementById("add-another-color"),
  'colors': document.querySelector(".colors"),
  'color': document.querySelectorAll(".colors .color"),
  'max': 5,
  'min': 2,
  'count': 2
};

document.ready.push(function() {
  material.addEventListener("change", changeMaterial);
  dimensionSelect.canvas.addEventListener("change", showPreviewProportions);
  dimensionSelect.panel.addEventListener("change", showPreviewProportions);
  dimensionSelect.wood.addEventListener("change", showPreviewProportions);
  landscape.addEventListener("change", invertDimensions);
  customtext.addEventListener("keydown", updateLetterCount);
  colors.artistchoice.addEventListener("click", toggleColorPicking);
  colors.add.addEventListener("click", addColorPicker);
  return showPreviewProportions();
});

colorPickerUpdate = function() {
  colors.color = document.querySelectorAll(".colors .color");
  colors.count = colors.color.length;
};

addColorPicker = function(e) {
  var clone, count, selector;
  colorPickerUpdate();
  count = colors.count;
  if (!(colors.count < colors.max)) {
    return;
  }
  if (colors.count === (colors.max - 1)) {
    colors.add.classList.toggle("hidden");
  }
  clone = colors.color[1].cloneNode(true);
  selector = "color" + count;
  clone.querySelector("label").setAttribute("for", selector);
  clone.querySelector("label").textContent = "pick color " + count;
  clone.querySelector("input").setAttribute("name", selector);
  clone.querySelector("input").setAttribute("id", selector);
  colors.colors.appendChild(clone);
  clone.querySelector("a.close").addEventListener("click", removeColorPicker);
};

removeColorPicker = function(e) {
  var color, _i, _len, _ref, _results;
  colorPickerUpdate();
  _ref = colors.color;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    color = _ref[_i];
    if (color.contains(e.target)) {
      _results.push((function(color) {
        color.classList.toggle("fadeout");
        return window.setTimeout(function() {
          color.remove();
          colorPickerUpdate();
          if (colors.count <= colors.max - 1) {
            return colors.add.classList.remove("hidden");
          }
        }, 250);
      })(color));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

toggleColorPicking = function(e) {
  return colors.pickcolors.classList.toggle("active");
};

updateLetterCount = function(e) {
  var current;
  current = document.getElementById("char-count");
  current.textContent = e.target.value.length;
  if (parseInt(current.textContent, 10) > parseInt(document.getElementById("char-max").textContent, 10)) {
    return current.classList.add("overflow");
  } else {
    return current.classList.remove("overflow");
  }
};

changeMaterial = function(e) {
  var m, mat;
  for (m in materials) {
    materials[m].classList.remove("active");
  }
  mat = e.target.value;
  materials[mat].classList.add("active");
  return showPreviewProportions();
};

invertDimensions = function(e) {
  var i, n, name, options, select, _i, _ref;
  for (name in dimensionSelect) {
    select = dimensionSelect[name];
    options = select.children;
    for (i = _i = 0, _ref = select.children.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      n = options[i].value.split("x");
      options[i].value = "" + n[1] + "x" + n[0];
      options[i].textContent = "" + n[1] + " × " + n[0];
    }
  }
  showPreviewProportions();
};

showPreviewProportions = function() {
  var ctx, height, scale, target, value, width, x, y;
  target = document.querySelectorAll(".sizes.active select")[0];
  value = target.value.split("x");
  x = 0;
  y = 1;
  width = parseInt(value[x], 10);
  height = parseInt(value[y], 10);
  scale = 14;
  canvas.width = width * scale;
  canvas.height = height * scale;
  ctx = canvas.getContext('2d');
  ctx.fillStyle = "#eee";
  ctx.strokeStyle = "#b2b2b2";
  ctx.rect(0, 0, canvas.width, canvas.height);
  ctx.fill();
  ctx.stroke();
  ctx.fillStyle = "#aaa";
  ctx.font = "" + scale + "px Open Sans";
  ctx.textAlign = "center";
  return ctx.fillText("" + value[x] + " × " + value[y], canvas.width * 0.5, (canvas.height + scale) * 0.5);
};
